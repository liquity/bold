type Collateral @entity {
  id: ID! # "collIndex", e.g. "0"
  collIndex: Int!
  token: Token!
  minCollRatio: BigInt!
  troves: [Trove!]! @derivedFrom(field: "collateral")
  addresses: CollateralAddresses! @derivedFrom(field: "collateral")
  stabilityPoolDeposits: [StabilityPoolDeposit!]!
  @derivedFrom(field: "collateral")
  totalDeposited: BigInt!
  totalDebt: BigInt!
  price: BigInt!
}

type Token @entity(immutable: true) {
  id: ID! # "collIndex", e.g. "0"
  collateral: Collateral!
  name: String!
  symbol: String!
  decimals: Int!
}

type CollateralAddresses @entity(immutable: true) {
  id: ID! # "collIndex", e.g. "0"
  borrowerOperations: Bytes!
  collateral: Collateral!
  sortedTroves: Bytes!
  stabilityPool: Bytes!
  token: Bytes!
  troveManager: Bytes!
  troveNft: Bytes!
}

type InterestRateBracket @entity {
  id: ID! # "collIndex:rateFloored", e.g. "0:44000000000000000"
  collateral: Collateral!
  rate: BigInt!
  totalDebt: BigInt!
}

enum TroveStatus {
  active
  closedByOwner
  closedByLiquidation
  zombie
}

type Trove @entity {
  id: ID! # "collIndex:collId", e.g. 0:0x1731afc858cad2708001a4f71851f9f775729c22f47df7c4360b1e416fd0f2de
  borrower: Bytes!
  closedAt: BigInt
  collateral: Collateral!
  createdAt: BigInt!
  debt: BigInt!
  deposit: BigInt!
  interestBatch: InterestBatch
  interestRate: BigInt!
  stake: BigInt!
  status: TroveStatus!
  troveId: String!
  usedLeverageZapper: Boolean!
  updatedAt: BigInt!
}

type BorrowerInfo @entity {
  id: ID! # "borrowerAddress", e.g. "0x0000000000000000000000000000000000000000"
  troves: Int!
  trovesByCollateral: [Int!]!
}

type StabilityPool @entity {
  id: ID! # "collIndex", e.g. "0"
  totalDeposited: BigInt!
}

type StabilityPoolDeposit @entity {
  id: ID! # "collIndex:depositor", e.g. "0:0x0000000000000000000000000000000000000000"
  collateral: Collateral!
  deposit: BigInt!
  depositor: Bytes!
  snapshot: StabilityPoolDepositSnapshot!
}

type StabilityPoolDepositSnapshot @entity {
  id: ID! # "collIndex:depositor", e.g. "0:0x0000000000000000000000000000000000000000"
  B: BigInt!
  P: BigInt!
  S: BigInt!
  epoch: BigInt!
  scale: BigInt!
  deposit: StabilityPoolDeposit! @derivedFrom(field: "snapshot")
}

# Data (S and B snapshots) related to a given epoch + scale combination.
# It corresponds to the epochToScaleToS and epochToScaleToB mappings in StabilityPool.sol.
type StabilityPoolEpochScale @entity {
  id: ID! # "collIndex:epoch:scale", e.g. "0:0:0"
  S: BigInt!
  B: BigInt!
}

type InterestBatch @entity {
  id: ID! # "collIndex:batchManager", e.g. "0:0x0000000000000000000000000000000000000000"
  collateral: Collateral!
  batchManager: Bytes!
  debt: BigInt!
  coll: BigInt!
  annualInterestRate: BigInt!
  annualManagementFee: BigInt!
  troves: [Trove!]! @derivedFrom(field: "interestBatch")
}

type GovernanceUser @entity {
  id: ID! # "userAddress", e.g. "0x0000000000000000000000000000000000000000"
  allocatedLQTY: BigInt!
  averageStakingTimestamp: BigInt!
  allocations: [GovernanceAllocation!]! @derivedFrom(field: "user")
}

# Allocation of a user to a given initiative.
type GovernanceAllocation @entity {
  id: ID! # "initiativeAddress:userAddress", e.g. "0x0000000000000000000000000000000000000000:0x0000000000000000000000000000000000000000"
  user: GovernanceUser!
  initiative: GovernanceInitiative!
  voteLQTY: BigInt!
  vetoLQTY: BigInt!
  atEpoch: Int!
}

type GovernanceInitiative @entity {
  id: ID! # "initiativeAddress", e.g. "0x0000000000000000000000000000000000000000"
  lastClaimEpoch: Int
  lastVoteSnapshotEpoch: Int
  lastVoteSnapshotVotes: BigInt
  registeredAt: BigInt!
  registeredAtEpoch: Int!
  registrant: Bytes!
  totalBoldClaimed: BigInt!
  totalVetos: BigInt!
  totalVotes: BigInt!
  unregisteredAt: BigInt
  unregisteredAtEpoch: Int
}

type GovernanceStats @entity {
  id: ID!
  totalLQTYStaked: BigInt!
  totalInitiatives: Int!
}
