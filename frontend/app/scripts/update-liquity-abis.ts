import * as v from "valibot";
import { $, fs, path } from "zx";

const dirname = path.dirname(new URL(import.meta.url).pathname);
const rootDir = path.resolve(`${dirname}/../../..`);
const appDir = `${rootDir}/frontend/app`;
const contractsDir = `${rootDir}/contracts`;
const artifactsTmpDir = `${appDir}/liquity-artifacts`;
const appAbisDir = `${appDir}/src/abi`;

// The first name is the contract ABI used in the app,
// the rest are possible names of the contract in the artifacts.
const ABIS = [
  // Protocol
  ["CollateralRegistry"],
  ["HintHelpers"],
  ["MultiTroveGetter"],

  // Collaterals
  ["ActivePool"],
  ["BorrowerOperations"],
  ["CollSurplusPool"],
  ["DefaultPool"],
  ["GasPool"],
  ["LeverageLSTZapper"],
  ["LeverageWETHZapper"],
  ["PriceFeed", "PriceFeedTestNet", "PriceFeedMock"],
  ["SortedTroves"],
  ["StabilityPool"],
  ["TroveManager"],
  ["TroveNFT"],
];

const ArtifactSchema = v.object({
  abi: v.array(v.unknown()),
});

async function writeAbiFromArtifact(abi: unknown, abiName: string) {
  const artifact = v.parse(ArtifactSchema, abi);

  const tsFileContent = [
    "// this file was generated by scripts/update-liquity-abis.ts",
    "// please do not edit it manually",
    `export const ${abiName} = ${JSON.stringify(artifact.abi)} as const;`,
  ].join("\n");

  await fs.writeFile(`${appAbisDir}/${abiName}.ts`, tsFileContent);
  await $`dprint --log-level silent fmt ${appAbisDir}/${abiName}.ts`;
}

async function getFirstJsonFound(dir: string) {
  const files = await fs.readdir(dir);
  for (const file of files) {
    if (file.endsWith(".json")) {
      return `${dir}/${file}`;
    }
  }
  throw new Error(`No JSON files found in ${dir}`);
}

async function readJsonFromDir(dir: string, names: string[]) {
  // try to find the file with the names provided
  for (const name of names) {
    console.log(`Reading ${name}.json in ${dir}/${name}.sol/…`);
    try {
      return JSON.parse(
        await fs.readFile(`${dir}/${name}.sol/${name}.json`, "utf-8"),
      );
    } catch (_) {}
  }

  // if not found, try the JSON file in the directory
  try {
    console.log(`Not found. Trying to find any JSON file in ${dir}/${names[0]}.sol/…`);
    return JSON.parse(
      await fs.readFile(await getFirstJsonFound(`${dir}/${names[0]}.sol`), "utf-8"),
    );
  } catch (_) {}

  return null;
}

async function main() {
  $.verbose = true;

  console.log("");
  console.log("1/3 Building Liquity contracts…");
  console.log("");

  await $`forge build --root ${contractsDir} --out ${artifactsTmpDir}`;

  console.log("");
  console.log("2/3 Writing ABIs…\n");

  await Promise.all(ABIS.map(async (possibleNames) => {
    const abiName = possibleNames[0];

    const abi = await readJsonFromDir(`${artifactsTmpDir}`, possibleNames);

    if (!abi) {
      throw new Error(`Could not find ABI for ${possibleNames.join(", ")}`);
    }

    console.log(`Writing ${abiName}…`);
    return writeAbiFromArtifact(abi, abiName);
  }));

  console.log("");
  console.log("3/3 Removing temporary artifacts…");
  console.log("");

  await $`rm -rf ${artifactsTmpDir}`;

  console.log("");
  console.log("Done.");
  console.log("");
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
