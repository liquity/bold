import { $ } from "dax-sh";
import * as fs from "fs/promises";
import * as path from "path";
import * as v from "valibot";

const dirname = path.dirname(new URL(import.meta.url).pathname);

const rootDir = path.resolve(`${dirname}/../../..`);

const appDir = `${rootDir}/frontend/app`;
const contractsDir = `${rootDir}/contracts`;
const artifactsTmpDir = `${appDir}/liquity-artifacts`;
const appAbisDir = `${appDir}/src/abi`;

const ABIS = [
  "ActivePool",
  "BoldToken",
  "BorrowerOperations",
  "CollSurplusPool",
  "DefaultPool",
  "ERC20Faucet",
  "GasPool",
  "HintHelpers",
  "MultiTroveGetter",
  "PriceFeed",
  "SortedTroves",
  "StabilityPool",
  "TroveManager",
];

const ArtifactSchema = v.object({
  abi: v.array(v.unknown()),
});

async function writeAbiFromArtifact(artifactPath: string, abiName: string) {
  const json = await fs.readFile(artifactPath, "utf-8");
  const artifact = v.parse(ArtifactSchema, JSON.parse(json));

  const tsFileContent = [
    "// this file was generated by scripts/update-liquity-abis.ts",
    "// please do not edit it manually",
    `export const ${abiName} = ${JSON.stringify(artifact.abi)} as const;`,
  ].join("\n");

  await fs.writeFile(`${appAbisDir}/${abiName}.ts`, tsFileContent);
  await $`dprint --log-level silent fmt ${appAbisDir}/${abiName}.ts`;
}

async function main() {
  console.log("ðŸ‘‰ Building Liquity contractsâ€¦\n");
  await $`forge build --root ${contractsDir} --out ${artifactsTmpDir}`;

  console.log("ðŸ‘‰ Building promisesâ€¦");
  await Promise.all(ABIS.map(async (abiName) => (
    writeAbiFromArtifact(
      `${artifactsTmpDir}/${abiName}.sol/${abiName}.json`,
      abiName,
    )
  )));

  console.log("ðŸ‘‰ Removing temporary artifactsâ€¦");
  await $`rm -rf ${artifactsTmpDir}`;
  console.log("\nDone.");
  console.log("");
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
