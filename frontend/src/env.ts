import { isAddress } from "@/src/eth-utils";
import z from "zod";

export const EnvSchema = z.object({
  CHAIN_ID: z.string(),
  CONTRACT_ACTIVE_POOL: zContractAddress("ACTIVE_POOL"),
  CONTRACT_BOLD_TOKEN: zContractAddress("BOLD_TOKEN"),
  CONTRACT_BORROWER_OPERATIONS: zContractAddress("BORROWER_OPERATIONS"),
  CONTRACT_COLL_SURPLUS_POOL: zContractAddress("COLL_SURPLUS_POOL"),
  CONTRACT_DEFAULT_POOL: zContractAddress("DEFAULT_POOL"),
  CONTRACT_FUNCTION_CALLER: zContractAddress("FUNCTION_CALLER"),
  CONTRACT_GAS_POOL: zContractAddress("GAS_POOL"),
  CONTRACT_HINT_HELPERS: zContractAddress("HINT_HELPERS"),
  CONTRACT_PRICE_FEED_TESTNET: zContractAddress("PRICE_FEED_TESTNET"),
  CONTRACT_SORTED_TROVES: zContractAddress("SORTED_TROVES"),
  CONTRACT_STABILITY_POOL: zContractAddress("STABILITY_POOL"),
  CONTRACT_TROVE_MANAGER: zContractAddress("TROVE_MANAGER"),
  WALLET_CONNECT_PROJECT_ID: z.string(),
}).transform((val) => ({
  ...val,
  CHAIN_ID: parseInt(val.CHAIN_ID, 10),
}));

export type Env = z.infer<typeof EnvSchema>;

export const {
  CHAIN_ID,
  CONTRACT_ACTIVE_POOL,
  CONTRACT_BOLD_TOKEN,
  CONTRACT_BORROWER_OPERATIONS,
  CONTRACT_COLL_SURPLUS_POOL,
  CONTRACT_DEFAULT_POOL,
  CONTRACT_FUNCTION_CALLER,
  CONTRACT_GAS_POOL,
  CONTRACT_HINT_HELPERS,
  CONTRACT_PRICE_FEED_TESTNET,
  CONTRACT_SORTED_TROVES,
  CONTRACT_STABILITY_POOL,
  CONTRACT_TROVE_MANAGER,
  WALLET_CONNECT_PROJECT_ID,
} = EnvSchema.parse({
  CHAIN_ID: process.env.NEXT_PUBLIC_CHAIN_ID,
  CONTRACT_ACTIVE_POOL: process.env.NEXT_PUBLIC_CONTRACT_ACTIVE_POOL,
  CONTRACT_BOLD_TOKEN: process.env.NEXT_PUBLIC_CONTRACT_BOLD_TOKEN,
  CONTRACT_BORROWER_OPERATIONS: process.env.NEXT_PUBLIC_CONTRACT_BORROWER_OPERATIONS,
  CONTRACT_COLL_SURPLUS_POOL: process.env.NEXT_PUBLIC_CONTRACT_COLL_SURPLUS_POOL,
  CONTRACT_DEFAULT_POOL: process.env.NEXT_PUBLIC_CONTRACT_DEFAULT_POOL,
  CONTRACT_FUNCTION_CALLER: process.env.NEXT_PUBLIC_CONTRACT_FUNCTION_CALLER,
  CONTRACT_GAS_POOL: process.env.NEXT_PUBLIC_CONTRACT_GAS_POOL,
  CONTRACT_HINT_HELPERS: process.env.NEXT_PUBLIC_CONTRACT_HINT_HELPERS,
  CONTRACT_PRICE_FEED_TESTNET: process.env.NEXT_PUBLIC_CONTRACT_PRICE_FEED_TESTNET,
  CONTRACT_SORTED_TROVES: process.env.NEXT_PUBLIC_CONTRACT_SORTED_TROVES,
  CONTRACT_STABILITY_POOL: process.env.NEXT_PUBLIC_CONTRACT_STABILITY_POOL,
  CONTRACT_TROVE_MANAGER: process.env.NEXT_PUBLIC_CONTRACT_TROVE_MANAGER,
  WALLET_CONNECT_PROJECT_ID: process.env.NEXT_PUBLIC_WALLET_CONNECT_PROJECT_ID,
});

function zContractAddress(envName: string) {
  return z.string().transform((value: string, { addIssue }) => {
    if (!isAddress(value)) {
      addIssue({
        code: z.ZodIssueCode.custom,
        message: `NEXT_PUBLIC_${envName} is not a valid Ethereum address`,
      });
      return z.NEVER;
    }
    return value;
  });
}
